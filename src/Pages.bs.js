// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Db$Coronate from "./Db.bs.js";
import * as ReactFeather from "react-feather";
import * as Utils$Coronate from "./Utils.bs.js";
import * as Router$Coronate from "./Router.bs.js";

function Pages$Splash(Props) {
  return React.createElement("div", {
              className: "pages__container"
            }, React.createElement("aside", {
                  className: "pages__hint"
                }, React.createElement("ol", undefined, React.createElement("li", {
                          className: "pages__hint-item"
                        }, React.createElement("button", {
                              className: "button-primary",
                              onClick: (function (param) {
                                  Db$Coronate.loadDemoDB(undefined);
                                })
                            }, "Click here to load the demo data"), " (optional)"), React.createElement("li", {
                          className: "pages__hint-item"
                        }, React.createElement(ReactFeather.ArrowLeft, {}), " Select a menu item."), React.createElement("li", {
                          className: "pages__hint-item"
                        }, "Start creating your tournaments!")), React.createElement(Utils$Coronate.$$Notification.make, {
                      children: React.createElement("div", undefined, React.createElement("p", undefined, "Coronate does not require an account.", React.createElement("br", undefined), "It saves your data locally in your browser."), React.createElement("p", undefined, "To manage your data, visit the ", React.createElement(Router$Coronate.Link.make, {
                                    children: "Options",
                                    to_: /* Options */4
                                  }), " page.")),
                      kind: /* Warning */1
                    })), React.createElement("div", {
                  className: "pages__title"
                }, React.createElement("div", {
                      className: "pages__title-icon"
                    }, React.createElement("img", {
                          alt: "",
                          height: "96",
                          src: Utils$Coronate.WebpackAssets.logo,
                          width: "96"
                        })), React.createElement("div", {
                      className: "pages__title-text"
                    }, React.createElement("h1", {
                          className: "title",
                          style: {
                            fontSize: "40px"
                          }
                        }, "Coronate"), React.createElement("p", {
                          className: "pages__subtitle caption-30"
                        }, "Tournament manager"))));
}

var Splash = {
  make: Pages$Splash
};

function log2(num) {
  return Math.log(num) / Math.log(2.0);
}

function fixNumber(num) {
  if (num < 0.0 || num === Pervasives.infinity || num === Pervasives.neg_infinity) {
    return 0.0;
  } else {
    return num;
  }
}

function updateInt(dispatch, minimum, $$event) {
  $$event.preventDefault();
  var value = Belt_Option.getWithDefault(Belt_Int.fromString($$event.currentTarget.value), minimum);
  var safeValue = value < minimum ? minimum : value;
  return Curry._1(dispatch, (function (param) {
                return safeValue;
              }));
}

var title = "Time calculator";

function Pages$TimeCalculator(Props) {
  var match = React.useState(function () {
        return 2;
      });
  var setPlayers = match[1];
  var players = match[0];
  var match$1 = React.useState(function () {
        return 5;
      });
  var setBreakTime = match$1[1];
  var breakTime = match$1[0];
  var match$2 = React.useState(function () {
        return 4.0;
      });
  var setTotalTime = match$2[1];
  var totalTime = match$2[0];
  return React.createElement("div", {
              className: "content-area"
            }, React.createElement("h1", undefined, title), React.createElement("p", {
                  className: "caption-30"
                }, "Estimate the time requirements for planning your Swiss-system tournament."), React.createElement("form", undefined, React.createElement("table", {
                      style: {
                        margin: "0"
                      }
                    }, React.createElement("tbody", undefined, React.createElement("tr", undefined, React.createElement("td", undefined, React.createElement("label", {
                                      htmlFor: "playerCount"
                                    }, "Player count ")), React.createElement("td", undefined, React.createElement("input", {
                                      id: "playerCount",
                                      style: {
                                        width: "40px"
                                      },
                                      min: String(0),
                                      type: "number",
                                      value: String(players),
                                      onChange: (function (param) {
                                          return updateInt(setPlayers, 0, param);
                                        })
                                    }))), React.createElement("tr", undefined, React.createElement("td", undefined, React.createElement("label", {
                                      htmlFor: "breakTime"
                                    }, "Breaks between rounds ")), React.createElement("td", undefined, React.createElement("input", {
                                      id: "breakTime",
                                      style: {
                                        width: "40px"
                                      },
                                      min: String(0),
                                      step: 5.0,
                                      type: "number",
                                      value: String(breakTime),
                                      onChange: (function (param) {
                                          return updateInt(setBreakTime, 0, param);
                                        })
                                    }), " minutes")), React.createElement("tr", undefined, React.createElement("td", undefined, React.createElement("label", {
                                      htmlFor: "totalTime"
                                    }, "Total time available ")), React.createElement("td", undefined, React.createElement("input", {
                                      id: "totalTime",
                                      style: {
                                        width: "40px"
                                      },
                                      min: String(0.5),
                                      step: 0.5,
                                      type: "number",
                                      value: String(totalTime),
                                      onChange: (function (param) {
                                          var minimum = 0.5;
                                          param.preventDefault();
                                          var value = Belt_Option.getWithDefault(Belt_Float.fromString(param.currentTarget.value), minimum);
                                          var safeValue = value < minimum ? minimum : value;
                                          return Curry._1(setTotalTime, (function (param) {
                                                        return safeValue;
                                                      }));
                                        })
                                    }), " hours"))))), React.createElement("dl", undefined, React.createElement("dt", {
                      className: "title-20"
                    }, "Round count"), React.createElement("dd", undefined, fixNumber(Math.ceil(log2(players)))), React.createElement("dt", {
                      className: "title-20"
                    }, "Maximum time control"), React.createElement("dd", undefined, React.createElement("span", {
                          className: "title-20"
                        }, fixNumber(Math.ceil((totalTime * 60.0 / Math.ceil(log2(players)) - breakTime) / 2.0)), " minutes"), React.createElement("span", {
                          className: "caption-20"
                        }, " = ((", React.createElement("strong", {
                              className: "monospace"
                            }, totalTime), " × 60 ÷ ⌈log₂(", React.createElement("strong", {
                              className: "monospace"
                            }, players), ")⌉) - ", React.createElement("strong", {
                              className: "monospace"
                            }, breakTime), ") ÷ 2"))));
}

function Pages$NotFound(Props) {
  return React.createElement("p", {
              className: "content-area"
            }, "Page not found.");
}

var NotFound = {
  make: Pages$NotFound
};

var TimeCalculator = {
  title: title,
  make: Pages$TimeCalculator
};

export {
  Splash ,
  TimeCalculator ,
  NotFound ,
}
/* react Not a pure module */
