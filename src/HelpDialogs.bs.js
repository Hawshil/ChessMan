// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ReactFeather from "react-feather";
import * as Pages$Coronate from "./Pages.bs.js";
import * as Router$Coronate from "./Router.bs.js";
import * as Externals$Coronate from "./Externals/Externals.bs.js";
import * as Data_Config$Coronate from "./Data/Data_Config.bs.js";
import * as Data_Scoring$Coronate from "./Data/Data_Scoring.bs.js";

function HelpDialogs$BaseDialog(Props) {
  var param = Props.state;
  var ariaLabel = Props.ariaLabel;
  var children = Props.children;
  var setFalse = param.setFalse;
  return React.createElement(Externals$Coronate.Dialog.make, {
              isOpen: param.state,
              onDismiss: setFalse,
              ariaLabel: ariaLabel,
              children: null,
              className: ""
            }, React.createElement("button", {
                  className: "button-micro",
                  onClick: (function (param) {
                      Curry._1(setFalse, undefined);
                    })
                }, "Done"), children);
}

function HelpDialogs$Pairing(Props) {
  var state = Props.state;
  var config = Props.config;
  var ariaLabel = Props.ariaLabel;
  return React.createElement(HelpDialogs$BaseDialog, {
              state: state,
              ariaLabel: ariaLabel,
              children: null
            }, React.createElement("p", undefined, "A Swiss-system tournament is effective when you carefully pair players according to\r\n          certain priorities. Calculating the ideal pairings by hand can be complicated, so that's\r\n          where auto-pair comes in."), React.createElement("p", undefined, "These are the pairing rules:"), React.createElement("ol", undefined, React.createElement("li", undefined, "Two players should not play each other more than once per tournament."), React.createElement("li", undefined, "Players with the same score should be paired."), React.createElement("li", undefined, "Players in the top \"half\" of ratings should be paired with players in the bottom \"half\"\r\n            of ratings. (This gives the chance for an upset!)"), React.createElement("li", undefined, "Players should each alternate playing ", Data_Config$Coronate.aliasToStringWhite(config), " and ", Data_Config$Coronate.aliasToStringBlack(config), " pieces. To facilitate this, each\r\n            player should be paired with someone who is due the opposite color that they are due.")), React.createElement("p", undefined, "Rule number one is the most important rule, and rule number two is a close second. Without\r\n          them, the whole Swiss system loses its effectiveness."), React.createElement("p", undefined, "Rules three and four are valuable because they keep the games fair and interesting, but\r\n          they are less important."), React.createElement("p", undefined, "You will never be able to perfectly follow all of these rules for every pairing in every\r\n          round. Auto-pair does its best to follow as many as it can, starting with the most\r\n          important."), React.createElement("p", undefined, "Auto-pair calculates an \"ideal\" for every possible match based on these rules, and then\r\n          finds the combination of pairings that has the highest average ideal for the whole round.\r\n          This means that sometimes it will not use one obvious pairing if it can use another\r\n          combination of pairings that is overall more ideal."), React.createElement("p", undefined, "When you manually pair a player, the auto-pair \"ideal\" score for each other player will\r\n          display as a percentage. Think of this as a strong suggestion."));
}

var Pairing = {
  make: HelpDialogs$Pairing
};

function HelpDialogs$SwissTournament(Props) {
  var state = Props.state;
  var ariaLabel = Props.ariaLabel;
  return React.createElement(HelpDialogs$BaseDialog, {
              state: state,
              ariaLabel: ariaLabel,
              children: null
            }, React.createElement("p", undefined, "Coronate uses ", React.createElement("a", {
                      href: "https://en.wikipedia.org/wiki/Swiss-system_tournament"
                    }, "Swiss-system tournaments ", React.createElement(ReactFeather.ExternalLink, {})), ". It sets a fixed number of rounds that will be smaller than the number of players. It\r\n          pairs players according to their scores, but without any two players meeting twice."), React.createElement("p", undefined, "A Swiss tournament produces a single first-place winner but many ties for second, third,\r\n          and so on. (If games are drawn, there may be ties for first as well.) It uses several\r\n          tie-breaking strategies to determine the final standings."), React.createElement("p", undefined, "To calculate how many rounds your tournament will require for a certain number of players,\r\n          you can refer to the ", React.createElement(Router$Coronate.Link.make, {
                      children: null,
                      to_: /* TimeCalculator */3
                    }, Pages$Coronate.TimeCalculator.title, " page"), "."));
}

var SwissTournament = {
  make: HelpDialogs$SwissTournament
};

function HelpDialogs$TieBreaks(Props) {
  var state = Props.state;
  var ariaLabel = Props.ariaLabel;
  return React.createElement(HelpDialogs$BaseDialog, {
              state: state,
              ariaLabel: ariaLabel,
              children: null
            }, React.createElement("p", undefined, "A Swiss-system tournament will always produce ties. These are tie-breaking strategies\r\n          adopted from the USCF rulebook. You may disable or adjust their priorities for each\r\n          tournament."), React.createElement("dl", undefined, React.createElement("dt", {
                      className: "title-20"
                    }, Data_Scoring$Coronate.TieBreak.toPrettyString(/* Buchholz */0)), React.createElement("dd", undefined, "Sum all of each player's opponents' scores."), React.createElement("dt", {
                      className: "title-20"
                    }, Data_Scoring$Coronate.TieBreak.toPrettyString(/* BuchholzCut1 */1)), React.createElement("dd", undefined, "Sum all of each player's opponents' scores, discarding the lowest."), React.createElement("dt", {
                      className: "title-20"
                    }, Data_Scoring$Coronate.TieBreak.toPrettyString(/* SonnebornBerger */2)), React.createElement("dd", undefined, "Sum the scores of opponents that a player has defeated, plus half the scores of opponents\r\n            with whom the player has drawn.")));
}

var TieBreaks = {
  make: HelpDialogs$TieBreaks
};

export {
  Pairing ,
  SwissTournament ,
  TieBreaks ,
}
/* react Not a pure module */
